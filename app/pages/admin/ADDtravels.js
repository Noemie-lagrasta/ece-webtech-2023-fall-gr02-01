import { useState, useEffect } from 'react';
import { useSupabaseClient } from '@supabase/auth-helpers-react';
import Layout from '../../components/Layout.js';
import { useUser } from '/components/UserContext.js';
import axios from 'axios';
import 'react-quill/dist/quill.snow.css'; // Import the styles
import dynamic from 'next/dynamic';
import Link from 'next/link';


const ReactQuill = dynamic(() => import('react-quill'), { ssr: false });


export default function Page() {
  const supabase = useSupabaseClient();
  const [message, setMessage] = useState(null);
  const { user, darkMode } = useUser();
  const [postDone, setPostDone] = useState(false);
  const [countries, setCountries] = useState([]);
  const [travelStory, setTravelStory] = useState('');

  const handleTravelStoryChange = (value) => {
    setTravelStory(value);
  };

  const onSubmit = async function (e) {
    e.preventDefault();
    const formElement = document.getElementById('nvpost');
    const formData = new FormData(formElement);

    const travelDays = formData.get('days') + ' ' + formData.get('measure');

    try {
      const { data: newContact, error } = await supabase
        .from('travels')
        .upsert([
          {
            TravelerName: formData.get('TravelerName'),
            TravelDest: formData.get('TravelDest'),
            TravelCountry: formData.get('TravelCountry'),
            TravelDays: travelDays,
            TravelStory: travelStory, // Use the state value for the TravelStory
            TravelTools: formData.get('TravelTools'),
            Travelemail: user.email,
          },
        ]);
      if (error) {
        throw error;
      }

      // Log or handle success for the upsert
      console.log('Upsert successful:', newContact);
      setPostDone(true);
    } catch (error) {
      console.error('Error in the upsert:', error);
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get('http://api.geonames.org/countryInfoJSON', {
          params: {
            username: 'aariane', // Replace with your GeoNames username
          },
        });

        const countryList = response.data.geonames.map((item) => item.countryName);

        setCountries(countryList);
      } catch (error) {
        console.error('Error fetching geographical data:', error);
      }
    };

    fetchData();
  }, []);

  return (
    <Layout title="Contacts" description="Generated by create next app">
      {postDone ? (
        <div className={`text-center mt-32 font-bold text-4xl text-orange-500 ${darkMode ? 'dark-writting' : 'light-writting'}`}>
          <span>Thanks for your new post, <br /><br />
            Click <a href='../../travels' className='hover:underline'> here</a> to see all posts from our users<br /><br />
            Click <Link href='/maps'><a className='hover:underline'> here</a></Link> to see the map.
          </span>
        </div>
      ) : (
        <div className={`flex items-center justify-center  text-white mt-20`}>
          <form className={`grid gap-3 text-center rounded-md w-130 p-8 bg-${darkMode ? 'blue' : 'orange'}-500`} id='nvpost'>

            <div className={`flex text-center font-bold text-xl ${darkMode ? 'text-black' : 'text-white'}`}>
              <label>
                <span>Who traveled ? </span>
                <input type="text" name="TravelerName" className='rounded-md text-black' placeholder='Jack STELLO' />
              </label>
            </div>
            <div className={`flex text-center font-bold text-xl ${darkMode ? 'text-black' : 'text-white'}`}>
              <label>
                <span>Where did you travel? </span>
                <input type="text" name="TravelDest" className='rounded-md text-black' placeholder='Paris' />
              </label>
            </div>

            <div className={`flex text-center font-bold text-xl ${darkMode ? 'text-black' : 'text-white'}`}>
              <label>
                <span>Pleace, precise the country</span>
                <select name="TravelCountry" className='rounded-md'>
                  {countries.map((country, index) => (
                    <option key={index} value={country}>
                      {country}
                    </option>
                  ))}
                </select>
              </label>
            </div>
            <div className={`flex text-center font-bold text-xl ${darkMode ? 'text-black' : 'text-white'}`}>
              <label>
                <span>How long did you stay?</span>
                <select name="days" className='rounded-md'>
                  <option>1</option>
                  <option>2</option>
                  <option>3</option>
                  <option>4</option>
                  <option>5</option>
                  <option>6</option>
                  <option>7</option>
                  <option>8</option>
                  <option>9</option>
                  <option>10</option>
                  <option>11</option>
                  <option>12</option>
                  <option>13</option>
                </select>
                <select name="measure" className='rounded-md'>
                  <option>days</option>
                  <option>weeks</option>
                  <option>months</option>
                </select>
              </label>
            </div>
            <div className={`flex text-center font-bold text-xl ${darkMode ? 'text-black' : 'text-white'}`}>
              <label className='mr-auto'>
                <span>How did you travel ?</span><br />
                <input type="radio" name="TravelTools" value="car" className='ml-3' /> by car <br />
                <input type="radio" name="TravelTools" value="plane" className='ml-3' /> by plane<br />
                <input type="radio" name="TravelTools" value="bpat" className='ml-3' /> by boat<br />
                <input type="radio" name="TravelTools" value="bus" className='ml-3' /> by bus<br />
                <input type="radio" name="TravelTools" value="train" className='ml-3' /> by train<br />
              </label>
            </div>
            <div className={`text-center font-bold text-xl ${darkMode ? 'text-black' : 'text-white'}`}>
              <label>
                <span>Tell us about your trip</span>
                {typeof window !== 'undefined' && (
                  <ReactQuill
                    value={message}
                    onChange={handleTravelStoryChange}
                    className='rounded-md w-full'  // Use w-full to make it full width
                    style={{ maxHeight: '600px' }}
                    placeholder='Tell us here the reason :)'
                  />
                )}
              </label>
            </div>

            <div>
              <button onClick={onSubmit}
                className={`rounded py-1 px-3 text-white bg-slate-500 hover:bg-${darkMode ? 'blue' : 'orange'}-500`}
              >
                Send
              </button>
            </div>
          </form>
        </div>
      )}
      {message &&
        <div
          aria-label="Overlow below the drawer dialog"
          className="fixed inset-0 bg-black/80 flex items-center justify-center"
          onClick={() => setMessage(null)}
          role="dialog"
        >
          <div
            aria-label="Alert pane"
            className="max-h-[90vh] max-w-[95vw] overflow-auto p-4 prose bg-white"
          >
            {message}
          </div>
        </div>
      }
    </Layout>
  );
}
