import { useEffect, useState } from 'react';
import { useSupabaseClient } from '@supabase/auth-helpers-react';
import Layout from '../components/Layout.js';
import { useUser } from '@/components/UserContext.js';
import sanitizeHtml from 'sanitize-html';
import 'react-quill/dist/quill.snow.css';
import dynamic from 'next/dynamic';

const ReactQuill = dynamic(() => import('react-quill'), { ssr: false });

//this page is only available for authentificated users
//it's a dedicated page for a contact form to the support team
export default function Page() {
  const supabase = useSupabaseClient();
  const [message, setMessage] = useState('');
  const { user, darkMode } = useUser();
  const [contactDone, setContactDone] = useState(false);

  //to get the message value
  const handleMessageChange = (value) => {
    setMessage(value);
  };

  useEffect(() => {
    setContactDone(false);
  }, []);

  //to insert the contcat form in the contacts database
  const onSubmit = async function (e) {
    e.preventDefault();

    const formData = new FormData(e.target);
    const sanitizedMessage = sanitizeHtml(message, { allowedTags: [], allowedAttributes: {} });


    if(user)
    {
    try {

           const { data: newContact, error } = await supabase
        .from('contacts')
        .insert([
          {
            firstname: formData.get('firstname'),
            lastname: formData.get('lastname'),
            email: user.email,
            message: sanitizedMessage,
            reply: false,
          },
        ],
        { returning: 'minimal' } // Ensure the onConflict column is specified
        );
        if (error) {
          throw error;
        }
    
        console.log('Success', newContact); 
        setContactDone(true);
    } catch (error) {
      console.error('Error submitting contact information:', error.message);
    }
  }
  
  };

  return (
    <Layout title="Contacts" description="Generated by create next app">
      {user ?
      (
      <>

   
      {contactDone ? (
        <div className={`text-center mt-20 font-bold text-4xl text-orange-500 ${darkMode ? 'dark-writting' : 'light-writting'}`}>
          Thank you for contacting us, our teams will get back to you within 2 weeks.<br />
          Best regards, <br />
          the WEB&apos;TRIPS team <br />
        </div>
      ) : (
    
        <div className={`flex items-center justify-center  text-white mt-32`}>
          <form className={`grid gap-3 text-center rounded-md w-96 p-8 bg-${darkMode ? 'blue' : 'orange'}-500`} onSubmit={onSubmit}>
            <div className={`flex text-center font-bold text-xl ${darkMode ? 'text-black' : 'text-white'}`}>
              <label>
                First name
                <input type="text" name="firstname" className='ml-5 rounded-md text-black' />
              </label>
            </div>
            <div className={`flex text-center font-bold text-xl ${darkMode ? 'text-black' : 'text-white'}`}>
              <label>
                Last name
                <input type="text" name="lastname" className='ml-5 rounded-md text-black' />
              </label>
            </div>
            <div className={`flex text-center font-bold text-xl ${darkMode ? 'text-black' : 'text-white'}`}>
              from : {user.email}
            </div>
            <div className='flex flex-grow'>
              <label>
                {typeof window !== 'undefined' && (
                  <ReactQuill
                    value={message}
                    onChange={handleMessageChange}
                    className='rounded-md flex-grow '
                    style={{ maxWidth: '310px' }}
                    placeholder='Tell us here the reason :)'
                  />
                )}
              </label>
            </div>
            <div>
              <button
                className="rounded py-1 px-3 text-white bg-slate-500 hover:bg-blue-500"
              >
                Send
              </button>
            </div>
          </form>
        </div>
      )}  </> ):(
        <>
        <div className={`text-center mt-20 font-bold text-4xl text-orange-500 ${darkMode ? 'dark-writting' : 'light-writting'}`}>
          please connect you to leave us a message</div>
        </>

      )}
    </Layout>
  );
}
